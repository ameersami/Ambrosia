type Query {
    "Retrieve a single stored Restaurant based on its id"
    getStoredRestaurant(jwt: String!, restaurantID: Int!): Restaurant
    "Retrieve multiple stored Restaurants based on their ids"
    getStoredRestaurants(jwt: String!, restaurantIDs: [Int!]): [Restaurant!]
    "Search for Restaurants from the Yelp API"
    searchRestaurants(jwt: String!, latitude: Float!, longitude: Float!, radius: Int, term: String, location: String, limit: Int): searchResponse!
    "Retrieve a single Restaurant from the Yelp API based on its id"
    getRestaurant(jwt: String!, id: String!): Business!
}

type Mutation {
    "Register a user"
    signUp(email: String!, password: String!, name: String!): signUpResponse!
    "Sign a user in"
    signIn(email: String!, password: String!): signinResponse!
    "Add a Restaurant to the DB"
    addRestaurant(jwt: String!, restaurantID: Int!, title: String!, users: [Int!]): addRestaurantResponse!
    "Have a user visit a restaurant"
    visitRestaurant(jwt: String!, restaurantID: Int!): visitRestaurantResponse!
    "Have a user unvisit a restaurant"
    unVisitRestaurant(jwt: String!, restaurantID: Int!): visitRestaurantResponse!
}

type User {
    _id: ID!
    name: String!
    email: String!
    password: String!
    resetToken: String
    resetTokenExpiry: Float
    savedRestaurants: [Int!]
}

type Restaurant {
    restaurantID: ID!
    title: String!
    users: [String!]
}

type signUpResponse {
    jwt: String!
    alreadyExists: Boolean!
    user: User
}

type signinResponse {
    jwt: String!
    success: Boolean!
}

type addRestaurantResponse {
    success: Boolean!
    restaurantID: ID!
}

type visitRestaurantResponse {
    success: Boolean!
}

type searchResponse { 
    total: Int!
    business: [Business!]!
}

type Business {
    name: String!
    id: String!
    isClosed: Boolean!
    url: String!
    phone: String!
    display_phone: String!
    review_count: Int!
    rating: Float!
    price: String!
    distance: Float!
    location: Location!
    photos: String!
    reviews: [Review!]!
    hours: [Hours!]!
}

type Location {
    address1: String!
    city: String!
    state: String!
    postal_code: String!
    formatted_address: String!
}

type Review {
    text: String!
    rating: Float!
    time_created: String!
    url: String!
}

type Hours {
    is_open_now: Boolean!
    open: [OpenHours]!
}

type OpenHours {
    is_overnight: Boolean!
    end: String!
    start: String!
    day: Int!
}